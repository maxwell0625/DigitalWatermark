实现方式（python、设计模式、RPC）

python：
    Python是一门脚本编程语言，它是开源的且代码清晰、易学易用，不仅适用于各种简单的脚本任务，甚至适用于
面向对象的大型的独立应用。与众多其他语言相比，使用Python编写的代码阅读、调试和扩展更加容易。应用Python
编程，我们可以解决面对现实生活中的很多任务。
2Python语言的特点
    Python拥有自己独特的优点，它不仅像简单解释型语言一样简单易用，同时还像传统编译型语言一样通用、强
大。
（1）简单易学。
    Python不仅结构简单、语法清晰，且关键字少，这样就使得阅读一个良好的Python程序像阅读英语一样轻松，
使得使用者可以专注在如何解决问题而不是去弄明白语言本身。同时Python的说明文档非常简单，有助于学习和使用Python语言。
（2）面向对象。
    面向对象的特点是Python与生俱来的。然而，Python不单纯是一门面向对象的语言，它的编程方式既可以是面向
对象的也可以是面向过程的。其中，采用“面向过程”的编程方式，程序是由可重用代码的函数或过程组合而成。采
用“面向对象”的编程方式，程序是由对象构建起来的，而对象又是由数据和功能组合而成。Python还融合了像Lisp
和Haskell的一些函数语言的特点。
（3）可扩展性。
    Python具有可扩展性，可以用C语言或者C++来编写部分程序从而使得某些关键代码运行速度更快或者使得某
些重要算法不被公开，再把这部分程序放在Python中使用。Python语言的类库不仅强大而且十分丰富，可以轻松
地联结使用其他语言（尤其是C语言或C++语言）制作的各类模块，Python的功能得以扩展。
（4）丰富的库。
    Python拥有庞大的标准库，它可以用来处理正则表达式、线程、文档生成、单元测试、网页浏览器、FTP、数
据库、WAV 文件、XML、HTML、GUI、电子邮件和其他与系统相关的操作。除了标准库外，还有如Python图像库、
wxPython和Twisted等许多高质量的库。

设计模式：
    模式的核心思想就是总结和积累前人的经验，通过对这些经验的学习，使得我们在解决一个新的
问题时不必从头做起。在软件设计开发中，将面向对象软件的设计经验作为设计模式记录下来。
每一个设计模式系统地命名、解释和评价了面向对象系统一个重要的和重复出现的设计。
    一般而言，一个模式有四个基本要素：
1)模式名称(pattern name) 一个助记名，它用一两个词来描述模式的问题、解决方案和效果。
2)问题(problem) 描述了应该在何时使用设计模式。它揭示了设计问题和问题存在的前因后果，
它可能描述了特定的设计问题，也可能描述了导致不灵活设计的类和对象结构。有时候，问题部分会包
括使用模式必须满足的一系列先决条件。
3)解决方案(solution)描述了设计的组成部分，它们之间的相互关系及各自的职责和协作方式。
4)效果(consequences) 描述了模式应用的效果及使用模式应权衡的问题。
设计模式在面向对象的软件设计过程中，可以帮助设计者把系统拆分成合理的对象，以适当的粒
度将它们归类，定义类的接口和继承层次，同时也能保证足够的灵活性，以适应今后的变化。
